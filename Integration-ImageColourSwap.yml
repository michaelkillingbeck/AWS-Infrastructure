AWSTemplateFormatVersion: '2010-09-09'
Description:  Lambda function for ImageColourSwap

Parameters:
  IntegrationUserPoolId:
    Default:  /ICS/Cognito/UserPoolId
    Description: The Id of the user pool for the Integration environment
    Type: AWS::SSM::Parameter::Value<String>
  
  ICSBucketName:
    Default:  /ICS/Settings/BucketName
    Description: The name of the S3 Bucket to save images in
    Type: AWS::SSM::Parameter::Value<String>

Resources:
  ICSProcessingFunction:
    Properties:
      Code:
        S3Bucket: imagecolourswap
        S3Key:  ImageColourSwapLambda/Lambda.zip
      Environment:
        Variables:
          BucketName: !Ref ICSBucketName
      FunctionName: Integration-ICSProcessingFunction
      Handler:  ImageColourSwap.Lambda::ImageColourSwap.Lambda.Program::Handler
      MemorySize: 512
      Role: arn:aws:iam::267855555195:role/ImageColourSwap-Lambda
      Runtime:  dotnet6
      Timeout:  30
    Type: AWS::Lambda::Function

  ICSLambdaPermission:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ICSProcessingFunction
      Principal:  'apigateway.amazonaws.com'
    Type: 'AWS::Lambda::Permission'

  ImageColourSwapAPI:
    Properties:
      Name: ImageColourSwap
    Type: 'AWS::ApiGateway::RestApi'

  Resource:
    Properties:
      ParentId: !GetAtt ImageColourSwapAPI.RootResourceId
      PathPart: ics
      RestApiId:  !Ref ImageColourSwapAPI
    Type: 'AWS::ApiGateway::Resource'

  GetMethod:
    Properties:
      AuthorizationType:  NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod:  POST
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: { 
          "application/json": "#set($inputRoot = $input.path('$')) { \"palletteImage\": \"$input.params('palletteImage')\", \"sourceImage\": \"$input.params('sourceImage')\" }"
        }  
        Type: AWS
        Uri:  {"Fn::Join" : 
          ["", ["arn:aws:apigateway:", {"Ref":"AWS::Region"},":lambda:path/2015-03-31/functions/",{"Fn::GetAtt": ["ICSProcessingFunction", "Arn"]}, "/invocations"]
        ]}
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:  { "application/json": "Empty" }
      RequestParameters: {
        method.request.querystring.palletteImage: true,
        method.request.querystring.sourceImage: true
      }
      ResourceId: !GetAtt ImageColourSwapAPI.RootResourceId
      RestApiId:  !Ref ImageColourSwapAPI
    Type: 'AWS::ApiGateway::Method'

  DemoLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ICSProcessingFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  ApiDeployment:
    DependsOn:  GetMethod
    Properties:
      Description:  'Test Description'
      RestApiId:  !Ref ImageColourSwapAPI
      StageName:  Integration
    Type: 'AWS::ApiGateway::Deployment'

  LambdaParameter:
    DependsOn:  ApiDeployment
    Properties:
      Name: '/ICS/Settings/ProcessingUri'
      Type: String
      Tier: Standard
      Value: !Ref ImageColourSwapAPI
    Type: 'AWS::SSM::Parameter'

  IntegrationIcsAppClient:
    Properties:
      ClientName: ICS
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: true
      PreventUserExistenceErrors: ENABLED
      UserPoolId: !Ref IntegrationUserPoolId
    Type: AWS::Cognito::UserPoolClient
  
  IntegrationIcsAppClientSecretParameter:
    Properties:
      Name: /ICS/Cognito/UserPoolClientSecret
      Type: String
      Value: !GetAtt IntegrationIcsAppClient.ClientSecret
    Type: AWS::SSM::Parameter

  IntegrationIcsAppClientIdParameter:
    Properties:
      Name: /ICS/Cognito/UserPoolClientid
      Type: String
      Value: !GetAtt IntegrationIcsAppClient.ClientId
    Type: AWS::SSM::Parameter